Microsoft (R) Macro Assembler Version 14.23.28105.4	    12/02/19 11:28:00
project.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 = 0000001A			strLen=26
 00000000			.data

 00000000  0000001A [		key BYTE strLen DUP(?),0
	    00
	   ] 00
 0000001B 50 4C 41 59 46	istr byte "PLAYFAIR CIPHER FOR COAL PROJECT",0
	   41 49 52 20 43
	   49 50 48 45 52
	   20 46 4F 52 20
	   43 4F 41 4C 20
	   50 52 4F 4A 45
	   43 54 00
 0000003C 00000000		k_size dword ?
 00000040 00000000		k_sizeb dword ?
 00000044  00000019 [		Grid byte 25 DUP(0),0
	    00
	   ] 00
 0000005E  000000FA [		pText byte 250 DUP(0),0
	    00
	   ] 00
 00000159  000000FA [		nPText byte 250 DUP(0),0
	    00
	   ] 00
 00000254  000000FA [		eText byte 250 DUP(0),0
	    00
	   ] 00
 0000034F  000000FA [		neText byte 250 DUP(0),0
	    00
	   ] 00
 0000044A 00			nPTextSize byte ?
 0000044B 00			nETextSize byte ?
 0000044C 45 6E 74 65 72	prompt0 byte "Enter 1 to Encrypt 2 to Dycrypt :",0
	   20 31 20 74 6F
	   20 45 6E 63 72
	   79 70 74 20 32
	   20 74 6F 20 44
	   79 63 72 79 70
	   74 20 3A 00
 0000046E 45 6E 74 65 72	prompt1 byte "Enter Your String(max 250 characters) :",0
	   20 59 6F 75 72
	   20 53 74 72 69
	   6E 67 28 6D 61
	   78 20 32 35 30
	   20 63 68 61 72
	   61 63 74 65 72
	   73 29 20 3A 00
 00000496 45 6E 74 65 72	prompt2 byte "Enter Encrypted String :",0
	   20 45 6E 63 72
	   79 70 74 65 64
	   20 53 74 72 69
	   6E 67 20 3A 00
 000004AF 45 6E 74 65 72	prompt3 byte "Enter Key:",0
	   20 4B 65 79 3A
	   00
 000004BA 54 68 65 20 4B	prompt4 byte "The KEY is: ",0
	   45 59 20 69 73
	   3A 20 00
 000004C7 54 68 65 20 47	prompt5 byte "The GRID is: ",0
	   52 49 44 20 69
	   73 3A 20 00
 000004D5  00000002 [		pair1 DWORD 2 DUP(?)
	    00000000
	   ]
 000004DD  00000002 [		pair2 DWORD 2 DUP(?)
	    00000000
	   ]
 000004E5 00			row byte 0
 000004E6 00			col byte 0
 000004E7 00			rCo byte 0
 000004E8 00			cCo byte 0

 00000000			.code
 00000000			    main PROC
				;		call intro
				;		mov edx,0
				;		call gotoxy
				;		call clrscr
 00000000  E8 00000007		       call begins
				        exit
 0000000C			    main ENDP
				;----------------------------------------------------------


 0000000C				begins proc
 0000000C  E8 0000000B				call encrypt
 00000011  E8 00000000 E			call crlf
 00000016  E8 00000016				call decrypt
 0000001B					rets:
 0000001B  C3						ret
 0000001C				begins endp
				;---------------------------------------------------------------------------------------


 0000001C				encrypt proc
 0000001C  E8 00000025				call GenerateRandomString
 00000021  E8 00000113				call GenerateGrid
 00000026  E8 00000099				call pEntery
 0000002B  E8 000001A1				call findT
 00000030  C3					ret
 00000031				encrypt endp
				;----------------------------------------------------------------------------------------


 00000031				decrypt proc
 00000031  E8 00000397				call kEntery
 00000036  E8 000000FE				call GenerateGrid
 0000003B  E8 000003CE				call etEntery
 00000040  E8 000003FF				call findeT
 00000045  C3				ret
 00000046				decrypt endp
				;----------------------------------------------------------------------------------------


 00000046			    GenerateRandomString PROC USES ecx
 00000047  B9 0000001B		        mov ecx, lengthOf key
 0000004C  BE 00000000 R	        mov esi, offset key
 00000051  B8 0000001A				mov eax,strlen
 00000056  E8 00000000 E			call randomize
 0000005B  E8 00000000 E			call randomrange
 00000060  A3 0000003C R			mov k_size,eax
 00000065  A3 00000040 R			mov k_sizeb,eax
 0000006A  8B 0D 0000003C R			mov ecx,k_size
 00000070			        L2:
 00000070  B8 0000001A		            mov eax, strlen
 00000075  E8 00000000 E	            call RandomRange
 0000007A  83 C0 41		            add eax, 65
 0000007D  8B D1					mov edx,ecx
 0000007F  8B 0D 0000003C R				mov ecx,k_size
 00000085  BF 00000000 R				mov edi,offset key
 0000008A  F2/ AE					repne scasb
 0000008C  74 07					jz sameChar
 0000008E  89 06		            mov [esi], eax
 00000090  46						inc esi
 00000091  8B CA					mov ecx,edx
 00000093  EB 03					jmp outss
 00000095						sameChar:
 00000095  8B CA					mov ecx,edx
 00000097  41						inc ecx
 00000098						outss:
 00000098  E2 D6		        loop L2
 0000009A  BA 000004BA R			mov edx,offset prompt4
 0000009F  E8 00000000 E			call writestring
 000000A4  BA 00000000 R			mov edx,offset key
 000000A9  E8 00000000 E			call writestring
 000000AE  E8 00000000 E			call crlf
 000000B3  A1 00000040 R			mov eax,k_sizeb
 000000B8  A3 0000003C R			mov k_size,eax
 000000BD  E8 00000000 E			call crlf
				        ret
 000000C4			    GenerateRandomString ENDP
				;----------------------------------------------------------------------------------------


 000000C4				pEntery proc
 000000C4  BA 0000046E R			mov edx,offset prompt1
 000000C9  E8 00000000 E			call writeString
 000000CE  BA 0000005E R			mov edx,offset pText
 000000D3  B9 000000FB				mov ecx,lengthof pText
 000000D8  E8 00000000 E			call readString
						
 000000DD  B9 000000FB				mov ecx,lengthof pText
 000000E2  BB 00000000				mov ebx,0
 000000E7  BE 0000005E R			mov esi,offset pText
 000000EC  BF 00000159 R			mov edi,offset nPText
 000000F1					L1:
 000000F1  AC						lodsb
 000000F2  3C 20					cmp al,32
 000000F4  74 16					je outss
 000000F6  3C 41					cmp al,'A'
 000000F8  7C 12					jl outss
 000000FA  3C 5A					cmp al,'Z'
 000000FC  7E 02					jng skiper
 000000FE  2C 20					sub al,32
 00000100						skiper:
 00000100  3C 5A					cmp al,'Z'
 00000102  7F 08					jg outss
 00000104  3C 4A					cmp al,'J'
 00000106  75 02					jne noJ
 00000108  B0 49						mov al,'I'
 0000010A						noJ:
 0000010A  AA							stosb
 0000010B  43						inc ebx
 0000010C						outss:
 0000010C  E2 E3				loop L1

 0000010E  BA 00000159 R			mov edx,offset nPText
 00000113  88 1D 0000044A R			mov nPTextSize,bl
 00000119  8B C3				mov eax,ebx
 0000011B  BA 00000000				mov edx,0
 00000120  BB 00000002				mov ebx,2
 00000125  F7 F3				div ebx
 00000127  83 FA 00				cmp edx,0
 0000012A  74 0C				je nNeed
 0000012C  B0 5A					mov al,'Z'
 0000012E  FE 05 0000044A R				inc  nPTextSize
 00000134  88 07					mov [edi],al
 00000136  8B 07					mov eax,[edi]
 00000138					nNeed:
						
 00000138  C3						ret	
 00000139				pEntery endp
				;----------------------------------------------------------------------------------------


 00000139				GenerateGrid PROC 
 00000139  BE 00000000 R		mov esi, offset key
 0000013E  BF 00000044 R		mov edi, offset Grid
 00000143  BB 00000000			mov ebx,0
 00000148  8B 0D 0000003C R		mov ecx,k_size
 0000014E				L1:
 0000014E  80 3E 4A			cmp byte ptr [esi],'J'
 00000151  74 06			je skip
 00000153  0F B6 1E			movzx ebx, byte ptr[esi]
 00000156  88 1F			mov byte ptr [edi],bl
 00000158  47				inc edi
 00000159				skip:
 00000159  46				inc esi
 0000015A  E2 F2			loop L1
 0000015C  B9 0000001A			mov ecx,26
 00000161  BB 00000000			mov ebx,0
 00000166  B3 41			mov bl,65
 00000168				L2:
 00000168  BE 00000000			mov esi,0
 0000016D  BA 00000000			mov edx,0
 00000172  8B D1			mov edx,ecx
 00000174  8B 0D 0000003C R		mov ecx,k_size
 0000017A				L3:
 0000017A  38 9E 00000044 R		cmp Grid[esi],bl
 00000180  74 06			je next_letter
 00000182  46				inc esi
 00000183  E2 F5			loop l3
 00000185  89 1F			mov [edi],ebx
 00000187  47				inc edi
 00000188				next_letter:
 00000188  FE C3			inc bl
 0000018A  80 FB 4A			cmp bl,'J'
 0000018D  74 F9			je next_letter
 0000018F  8B CA			mov ecx,edx
 00000191  E2 D5			loop l2
 00000193  B9 00000019			mov ecx,25
 00000198  BE 00000044 R		mov esi,offset Grid
 0000019D  BF 00000001			mov edi,1
 000001A2  BA 000004C7 R		mov edx,offset prompt5
 000001A7  E8 00000000 E		call writestring
 000001AC  E8 00000000 E		call crlf
 000001B1				print:
 000001B1  8B 06				mov eax,[esi]
 000001B3  E8 00000000 E			call writechar
 000001B8  83 FF 05				cmp edi,5
 000001BB  75 0A				jne nope
 000001BD  E8 00000000 E				call crlf
 000001C2  BF 00000000					mov edi,0
 000001C7					nope:
 000001C7  46					inc esi
 000001C8  47					inc edi
 000001C9  E2 E6			loop print
 000001CB  E8 00000000 E		call crlf
 000001D0  C3				ret
 000001D1				GenerateGrid ENDP
				;----------------------------------------------------------------------------------------


 000001D1				findT proc uses edx
 000001D2  BA 00000000				mov edx,0
 000001D7  55					push ebp
 000001D8  8B EC				mov ebp,esp
 000001DA  83 EC 08				sub esp , 8
 000001DD  0F B6 05				movzx eax,nPTextSize
	   0000044A R
 000001E4  BB 00000002				mov ebx,2
 000001E9  F7 F3				Div ebx
 000001EB  0F B6 C8				movzx ecx,al
						
 000001EE  BE 00000000					mov esi,0
 000001F3					fLoop1:
 000001F3  8B D9					mov ebx,ecx
 000001F5  B8 00000000					mov eax,0
 000001FA  BF 00000000					mov edi,0
 000001FF  0F B6 86					movzx eax,npText[esi]
	   00000159 R
 00000206  89 45 FC					mov [ebp-4],eax
 00000209  46						inc esi
 0000020A  0F B6 86					movzx eax,npText[esi]
	   00000159 R
 00000211  46						inc esi
 00000212  89 45 F8					mov [ebp-8],eax
 00000215  C6 05 000004E7 R				mov rCo,0
	   00
 0000021C						fLoop2:
 0000021C  B9 00000005						mov ecx,5
 00000221  C6 05 000004E8 R					mov cCo,0
	   00
 00000228							fLoop3:
 00000228  0F B6 3D							movzx edi,col
	   000004E6 R
 0000022F  8B 45 FC							mov eax,[ebp-4]
 00000232  3A 87 00000044 R						cmp al,grid[edi]
 00000238  74 16							je oLoop
 0000023A  FE 05 000004E6 R						inc col
 00000240  FE 05 000004E8 R						inc cCo
 00000246  E2 E0						loop fLoop3
 00000248  FE 05 000004E7 R					inc rCo
 0000024E  EB CC					jmp fLoop2
 00000250						oLoop:
 00000250  0F B6 05					movzx eax,rCo
	   000004E7 R
 00000257  A3 000004D5 R				mov pair1[0],eax
 0000025C  E8 00000000 E				call crlf
 00000261  E8 00000000 E				call writeDec
 00000266  0F B6 05					movzx eax,cCo
	   000004E8 R
 0000026D  A3 000004D9 R				mov pair1[4],eax
 00000272  E8 00000000 E				call writeDec


 00000277  C6 05 000004E7 R				mov rCo,0
	   00
 0000027E  C6 05 000004E6 R				mov col,0
	   00
 00000285						fLoop4:
 00000285  B9 00000005						mov ecx,5
 0000028A  C6 05 000004E8 R					mov cCo,0
	   00
 00000291							fLoop5:
 00000291  0F B6 3D							movzx edi,col
	   000004E6 R
 00000298  8B 45 F8							mov eax,[ebp-8]
 0000029B  3A 87 00000044 R						cmp al,grid[edi]
 000002A1  74 16							je oLoop2
 000002A3  FE 05 000004E6 R						inc col
 000002A9  FE 05 000004E8 R						inc cCo
 000002AF  E2 E0						loop fLoop5
 000002B1  FE 05 000004E7 R					inc rCo
 000002B7  EB CC					jmp fLoop4
 000002B9						oLoop2:
 000002B9  0F B6 05					movzx eax,rCo
	   000004E7 R
 000002C0  A3 000004DD R				mov pair2[0],eax
 000002C5  E8 00000000 E				call crlf
 000002CA  E8 00000000 E				call writeDec
 000002CF  0F B6 05					movzx eax,cCo
	   000004E8 R
 000002D6  A3 000004E1 R				mov pair2[4],eax
 000002DB  E8 00000000 E				call writeDec
 000002E0  8B CB					mov ecx,ebx
 000002E2  49						dec ecx
 000002E3  C6 05 000004E6 R				mov col,0
	   00
 000002EA  E8 00000065					call change
 000002EF  B8 00000005					mov eax,5
 000002F4  BA 00000000					mov edx,0
 000002F9  F7 25 000004D5 R				mul pair1[0]
 000002FF  03 05 000004D9 R				add eax,pair1[4]
 00000305  0F B6 80					movzx eax,grid[eax]
	   00000044 R
 0000030C  88 86 00000252 R				mov eText[esi-2],al
 00000312  B8 00000005					mov eax,5
 00000317  BA 00000000					mov edx,0
 0000031C  F7 25 000004DD R				mul pair2[0]
 00000322  03 05 000004E1 R				add eax,pair2[4]
 00000328  0F B6 80					movzx eax,grid[eax]
	   00000044 R
 0000032F  88 86 00000253 R				mov eText[esi-1],al

 00000335  83 F9 00					cmp ecx,0
 00000338  74 05					je endFun
 0000033A  E9 FFFFFEB4					jmp fLoop1
 0000033F						endFun:
 0000033F  BA 00000254 R			mov edx,offset eText
 00000344  E8 00000000 E		   call crlf
 00000349  E8 000002EB			   call eSPrint
 0000034E  83 C4 08				add esp,8
 00000351  5D					pop ebp
					ret
 00000354				findT endp
				;----------------------------------------------------------------------------------------


 00000354				change proc uses edi esi ebx eax
 00000358  BE 000004D5 R			mov esi,offset pair1
 0000035D  BF 000004DD R			mov edi,offset pair2
 00000362  8B 06				mov eax,[esi]
 00000364  3A 07				cmp al,[edi]
 00000366  74 13				je sRow
 00000368  8B 46 04				mov eax,[esi+4]
 0000036B  3A 47 04				cmp al,[edi+4]
 0000036E  74 35				je sCol
 00000370  8B 46 04				mov eax,[esi+4]
 00000373  87 47 04				xchg eax,[edi+4]
 00000376  89 46 04				mov [esi+4],eax
 00000379  EB 4D				jmp rets
 0000037B					sRow:
 0000037B  8B 46 04					mov eax,[esi+4]
 0000037E  83 F8 04					cmp eax,4
 00000381  75 08					jne nREdge1
 00000383  B8 FFFFFFFF					mov eax,-1
 00000388  89 46 04					mov [esi+4],eax
 0000038B						nREdge1:
 0000038B  40						inc eax
 0000038C  89 46 04					mov [esi+4],eax
 0000038F  8B 47 04					mov eax,[edi+4]
 00000392  83 F8 04					cmp eax,4
 00000395  75 08					jne nREdge2
 00000397  B8 FFFFFFFF					mov eax,-1
 0000039C  89 47 04					mov [edi+4],eax
 0000039F						nREdge2:
 0000039F  40						inc eax
 000003A0  89 47 04					mov [edi+4],eax
 000003A3  EB 23					jmp rets
 000003A5					sCol:
 000003A5  8B 06					mov eax,[esi]
 000003A7  83 F8 04					cmp eax,4
 000003AA  75 07					jne nCEdge1
 000003AC  B8 FFFFFFFF					mov eax,-1
 000003B1  89 06					mov [esi],eax
 000003B3						nCEdge1:
 000003B3  40						inc eax
 000003B4  89 06					mov [esi],eax
 000003B6  8B 07					mov eax,[edi]
 000003B8  3C 04					cmp al,4
 000003BA  75 07					jne nCEdge2
 000003BC  B8 FFFFFFFF					mov eax,-1
 000003C1  89 07					mov [edi],eax
 000003C3						nCEdge2:
 000003C3  40						inc eax
 000003C4  89 07					mov [edi],eax
 000003C6  EB 00					jmp rets
 000003C8					rets:

					ret
 000003CD				change endp
				;----------------------------------------------------------------------------------------



 000003CD				kEntery proc
 000003CD  BA 000004AF R		mov edx,offset prompt3
 000003D2  E8 00000000 E		call writestring
 000003D7  B9 00000018			mov ecx,24
 000003DC  BA 00000000 R		mov edx,offset key
 000003E1  BE 00000000			mov esi,0
 000003E6  E8 00000000 E		call readstring
 000003EB				L1:
 000003EB  0F B6 86				movzx eax,key[esi]
	   00000000 R
 000003F2  83 F8 5A				cmp eax,'Z'
 000003F5  7E 08				jng skipper
 000003F7  2C 20				sub al,32
 000003F9  88 86 00000000 R			mov key[esi],al
 000003FF					skipper:
 000003FF  83 F8 00				cmp eax,0
 00000402  74 03				je outss
 00000404  46					inc esi
 00000405  E2 E4			loop L1
 00000407				outss:
 00000407  89 35 0000003C R		mov k_size,esi
 0000040D  C3				ret
 0000040E				kEntery endp
				;----------------------------------------------------------------------------------------


 0000040E				eTEntery proc
						
 0000040E  BB 00000000				mov ebx,0
 00000413  BE 00000254 R			mov esi,offset eText
 00000418  BF 0000034F R			mov edi,offset neText
 0000041D					L1:
 0000041D  AC						lodsb
 0000041E  3C 20					cmp al,32
 00000420  74 14					je outss
 00000422  3C 41					cmp al,'A'
 00000424  7C 10					jl outss
 00000426  3C 5A					cmp al,'Z'
 00000428  7E 02					jng skipper
 0000042A  2C 20					sub al,32
 0000042C						skipper:
 0000042C  3C 5A					cmp al,'Z'
 0000042E  7F 06					jg outss
 00000430  3C 00					cmp al,0
 00000432  74 04					je ls
 00000434  AA						stosb
 00000435  43						inc ebx
 00000436						outss:
 00000436  E2 E5				loop L1
 00000438					ls:
 00000438  BA 00000159 R			mov edx,offset nPText
 0000043D  88 1D 0000044B R			mov nETextSize,bl
 00000443  C3						ret
 00000444				eTEntery endp
				;----------------------------------------------------------------------------------------


 00000444				findET proc
 00000444  55				push ebp
 00000445  BA 00000000			mov edx,0
 0000044A  8B EC				mov ebp,esp
 0000044C  83 EC 08				sub esp , 8
 0000044F  0F B6 05				movzx eax,nETextSize
	   0000044B R
 00000456  BB 00000002				mov ebx,2
 0000045B  F7 F3				Div ebx
 0000045D  0F B6 C8				movzx ecx,al
						
 00000460  BE 00000000					mov esi,0
 00000465					fLoop1:
 00000465  8B D9					mov ebx,ecx
 00000467  B8 00000000					mov eax,0
 0000046C  BF 00000000					mov edi,0
 00000471  0F B6 86					movzx eax,neText[esi]
	   0000034F R
 00000478  89 45 FC					mov [ebp-4],eax
 0000047B  46						inc esi
 0000047C  0F B6 86					movzx eax,neText[esi]
	   0000034F R
 00000483  46						inc esi
 00000484  89 45 F8					mov [ebp-8],eax
 00000487  C6 05 000004E7 R				mov rCo,0
	   00
 0000048E						fLoop2:
 0000048E  B9 00000005						mov ecx,5
 00000493  C6 05 000004E8 R					mov cCo,0
	   00
 0000049A							fLoop3:
 0000049A  0F B6 3D							movzx edi,col
	   000004E6 R
 000004A1  8B 45 FC							mov eax,[ebp-4]
 000004A4  3A 87 00000044 R						cmp al,grid[edi]
 000004AA  74 16							je oLoop
 000004AC  FE 05 000004E6 R						inc col
 000004B2  FE 05 000004E8 R						inc cCo
 000004B8  E2 E0						loop fLoop3
 000004BA  FE 05 000004E7 R					inc rCo
 000004C0  EB CC					jmp fLoop2
 000004C2						oLoop:
 000004C2  0F B6 05					movzx eax,rCo
	   000004E7 R
 000004C9  A3 000004D5 R				mov pair1[0],eax
 000004CE  E8 00000000 E				call crlf
 000004D3  E8 00000000 E				call writeDec
 000004D8  0F B6 05					movzx eax,cCo
	   000004E8 R
 000004DF  A3 000004D9 R				mov pair1[4],eax
 000004E4  E8 00000000 E				call writeDec


 000004E9  C6 05 000004E7 R				mov rCo,0
	   00
 000004F0  C6 05 000004E6 R				mov col,0
	   00
 000004F7						fLoop4:
 000004F7  B9 00000005						mov ecx,5
 000004FC  C6 05 000004E8 R					mov cCo,0
	   00
 00000503							fLoop5:
 00000503  0F B6 3D							movzx edi,col
	   000004E6 R
 0000050A  8B 45 F8							mov eax,[ebp-8]
 0000050D  3A 87 00000044 R						cmp al,grid[edi]
 00000513  74 16							je oLoop2
 00000515  FE 05 000004E6 R						inc col
 0000051B  FE 05 000004E8 R						inc cCo
 00000521  E2 E0						loop fLoop5
 00000523  FE 05 000004E7 R					inc rCo
 00000529  EB CC					jmp fLoop4
 0000052B						oLoop2:
 0000052B  0F B6 05					movzx eax,rCo
	   000004E7 R
 00000532  A3 000004DD R				mov pair2[0],eax
 00000537  E8 00000000 E				call crlf
 0000053C  E8 00000000 E				call writeDec
 00000541  0F B6 05					movzx eax,cCo
	   000004E8 R
 00000548  A3 000004E1 R				mov pair2[4],eax
 0000054D  E8 00000000 E				call writeDec
 00000552  8B CB					mov ecx,ebx
 00000554  49						dec ecx
 00000555  C6 05 000004E6 R				mov col,0
	   00
 0000055C  E8 0000005F					call unchange
 00000561  B8 00000005					mov eax,5
 00000566  BA 00000000					mov edx,0
 0000056B  F7 25 000004D5 R				mul pair1[0]
 00000571  03 05 000004D9 R				add eax,pair1[4]
 00000577  0F B6 80					movzx eax,grid[eax]
	   00000044 R
 0000057E  88 86 00000157 R				mov npText[esi-2],al
 00000584  B8 00000005					mov eax,5
 00000589  BA 00000000					mov edx,0
 0000058E  F7 25 000004DD R				mul pair2[0]
 00000594  03 05 000004E1 R				add eax,pair2[4]
 0000059A  0F B6 80					movzx eax,grid[eax]
	   00000044 R
 000005A1  88 86 00000158 R				mov npText[esi-1],al

 000005A7  83 F9 00					cmp ecx,0
 000005AA  74 05					je endFun
 000005AC  E9 FFFFFEB4					jmp fLoop1
 000005B1						endFun:
 000005B1  E8 00000000 E			call crlf
 000005B6  E8 000000B6			   call pSPrint
 000005BB  83 C4 08				add esp,8
 000005BE  5D					pop ebp
 000005BF  C3				ret
 000005C0				findET endp
				;----------------------------------------------------------------------------------------
					
					
 000005C0				unchange proc  uses edi esi ebx eax
 000005C4  BE 000004D5 R			mov esi,offset pair1
 000005C9  BF 000004DD R			mov edi,offset pair2
 000005CE  8B 06				mov eax,[esi]
 000005D0  3A 07				cmp al,[edi]
 000005D2  74 13				je sRow
 000005D4  8B 46 04				mov eax,[esi+4]
 000005D7  3A 47 04				cmp al,[edi+4]
 000005DA  74 35				je sCol
 000005DC  8B 46 04				mov eax,[esi+4]
 000005DF  87 47 04				xchg eax,[edi+4]
 000005E2  89 46 04				mov [esi+4],eax
 000005E5  EB 4D				jmp rets
 000005E7					sRow:
 000005E7  8B 46 04					mov eax,[esi+4]
 000005EA  83 F8 00					cmp eax,0
 000005ED  75 08					jne nREdge1
 000005EF  B8 00000005					mov eax,5
 000005F4  89 46 04					mov [esi+4],eax
 000005F7						nREdge1:
 000005F7  48						dec eax
 000005F8  89 46 04					mov [esi+4],eax
 000005FB  8B 47 04					mov eax,[edi+4]
 000005FE  83 F8 00					cmp eax,0
 00000601  75 08					jne nREdge2
 00000603  B8 00000005					mov eax,5
 00000608  89 47 04					mov [edi+4],eax
 0000060B						nREdge2:
 0000060B  48						dec eax
 0000060C  89 47 04					mov [edi+4],eax
 0000060F  EB 23					jmp rets
 00000611					sCol:
 00000611  8B 06					mov eax,[esi]
 00000613  83 F8 00					cmp eax,0
 00000616  75 07					jne nCEdge1
 00000618  B8 00000005					mov eax,5
 0000061D  89 06					mov [esi],eax
 0000061F						nCEdge1:
 0000061F  48						dec eax
 00000620  89 06					mov [esi],eax
 00000622  8B 07					mov eax,[edi]
 00000624  3C 00					cmp al,0
 00000626  75 07					jne nCEdge2
 00000628  B8 00000005					mov eax,5
 0000062D  89 07					mov [edi],eax
 0000062F						nCEdge2:
 0000062F  48						dec eax
 00000630  89 07					mov [edi],eax
 00000632  EB 00					jmp rets
 00000634					rets:
						ret
 00000639				unchange endp

 00000639				ESPrint proc
 00000639  BE 00000000			mov esi,0
 0000063E  BF 0000005E R		mov edi,offset pText
 00000643  0F B6 0D			movzx ecx,nPTextSize
	   0000044A R
 0000064A  BB 00000000			mov ebx,0
 0000064F				L1:
 0000064F  8A 1F			mov bl,byte ptr[edi]
 00000651  83 FB 20			cmp ebx,32
 00000654  75 0A			jne skip
 00000656  B8 00000020			mov eax,32
 0000065B  E8 00000000 E		call writeChar
 00000660				skip:
 00000660  0F B6 86			movzx eax,eText[esi]
	   00000254 R
 00000667  E8 00000000 E		call writeChar
 0000066C  46				inc esi
 0000066D  47				inc edi
 0000066E  E2 DF			loop L1
 00000670  C3				ret
 00000671				eSPrint endp


 00000671				pSPrint proc
 00000671  BE 00000000			mov esi,0
 00000676  BF 00000254 R		mov edi,offset eText
 0000067B  0F B6 0D			movzx ecx,neTextSize
	   0000044B R
 00000682  BB 00000000			mov ebx,0
 00000687				L1:
 00000687  8A 1F			mov bl,byte ptr[edi]
 00000689  83 FB 20			cmp ebx,32
 0000068C  75 0A			jne skip
 0000068E  B8 00000020			mov eax,32
 00000693  E8 00000000 E		call writeChar
 00000698				skip:
 00000698  0F B6 86			movzx eax,nPText[esi]
	   00000159 R
 0000069F  E8 00000000 E		call writeChar
 000006A4  46				inc esi
 000006A5  47				inc edi
 000006A6  E2 DF			loop L1
 000006A8  C3				ret
 000006A9				pSPrint endp

 000006A9				intro proc
 000006A9  BA 00000000			mov edx,0
 000006AE  B9 00000078		mov ecx ,120
 000006B3			L1:
 000006B3  B8 0000002F		mov eax ,'/'
 000006B8  E8 00000000 E	call gotoxy
 000006BD  E8 00000000 E	call writeChar
 000006C2  B8 0000000F		mov eax, 15
 000006C7  E8 00000000 E	call delay
 000006CC  FE C2		inc dl
 000006CE  E2 E3		loop L1
 000006D0  B9 00000019		mov ecx,25
 000006D5  FE CA		dec dl
 000006D7  FE C6		inc dh
 000006D9			L2:
 000006D9  B8 0000002F		mov eax ,'/'
 000006DE  E8 00000000 E	call gotoxy
 000006E3  E8 00000000 E	call writeChar
 000006E8  B8 00000019		mov eax, 25
 000006ED  E8 00000000 E	call delay
 000006F2  FE C6		inc dh

 000006F4  E2 E3		loop L2
 000006F6  FE CE		dec dh
 000006F8  FE CA		dec dl
 000006FA  B9 00000078		mov ecx,120
 000006FF			L3:
 000006FF  B8 0000002F		mov eax ,'/'
 00000704  E8 00000000 E	call gotoxy
 00000709  E8 00000000 E	call writeChar
 0000070E  B8 0000000F		mov eax, 15
 00000713  E8 00000000 E	call delay
 00000718  FE CA		dec dl
 0000071A  E2 E3		loop L3
 0000071C  FE CE		dec dh
 0000071E  B2 00		mov dl,0
 00000720  B9 00000019		mov ecx,25
 00000725			L4:
 00000725  B8 0000002F		mov eax ,'/'
 0000072A  E8 00000000 E	call gotoxy
 0000072F  E8 00000000 E	call writeChar
 00000734  B8 00000019		mov eax, 25
 00000739  E8 00000000 E	call delay
 0000073E  FE CE		dec dh
 00000740  E2 E3		loop L4
 00000742  B6 0C		mov dh,12
 00000744  B2 28		mov dl,40
 00000746  E8 00000000 E	call gotoxy
 0000074B  BA 0000001B R	mov edx,offset istr
 00000750  E8 00000000 E	call writestring
 00000755  B9 00000004		mov ecx,4
 0000075A			L5:

 0000075A  E2 FE		loop L5
 0000075C  B8 000005DC		mov eax,1500
 00000761  E8 00000000 E	call delay
 00000766  B8 00000000		mov eax,0

 0000076B  C3				ret
 0000076C				intro endp


				END main
Microsoft (R) Macro Assembler Version 14.23.28105.4	    12/02/19 11:28:00
project.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004E9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000076C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ESPrint  . . . . . . . . . . . .	P Near	 00000639 _TEXT	Length= 00000038 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000064F _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000660 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateGrid . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 00000098 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000014E _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000159 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000168 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000017A _TEXT	
  next_letter  . . . . . . . . .	L Near	 00000188 _TEXT	
  print  . . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  nope . . . . . . . . . . . . .	L Near	 000001C7 _TEXT	
GenerateRandomString . . . . . .	P Near	 00000046 _TEXT	Length= 0000007E Public STDCALL
  L2 . . . . . . . . . . . . . .	L Near	 00000070 _TEXT	
  sameChar . . . . . . . . . . .	L Near	 00000095 _TEXT	
  outss  . . . . . . . . . . . .	L Near	 00000098 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
begins . . . . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 00000010 Public STDCALL
  rets . . . . . . . . . . . . .	L Near	 0000001B _TEXT	
change . . . . . . . . . . . . .	P Near	 00000354 _TEXT	Length= 00000079 Public STDCALL
  sRow . . . . . . . . . . . . .	L Near	 0000037B _TEXT	
  nREdge1  . . . . . . . . . . .	L Near	 0000038B _TEXT	
  nREdge2  . . . . . . . . . . .	L Near	 0000039F _TEXT	
  sCol . . . . . . . . . . . . .	L Near	 000003A5 _TEXT	
  nCEdge1  . . . . . . . . . . .	L Near	 000003B3 _TEXT	
  nCEdge2  . . . . . . . . . . .	L Near	 000003C3 _TEXT	
  rets . . . . . . . . . . . . .	L Near	 000003C8 _TEXT	
decrypt  . . . . . . . . . . . .	P Near	 00000031 _TEXT	Length= 00000015 Public STDCALL
eTEntery . . . . . . . . . . . .	P Near	 0000040E _TEXT	Length= 00000036 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000041D _TEXT	
  skipper  . . . . . . . . . . .	L Near	 0000042C _TEXT	
  outss  . . . . . . . . . . . .	L Near	 00000436 _TEXT	
  ls . . . . . . . . . . . . . .	L Near	 00000438 _TEXT	
encrypt  . . . . . . . . . . . .	P Near	 0000001C _TEXT	Length= 00000015 Public STDCALL
findET . . . . . . . . . . . . .	P Near	 00000444 _TEXT	Length= 0000017C Public STDCALL
  fLoop1 . . . . . . . . . . . .	L Near	 00000465 _TEXT	
  fLoop2 . . . . . . . . . . . .	L Near	 0000048E _TEXT	
  fLoop3 . . . . . . . . . . . .	L Near	 0000049A _TEXT	
  oLoop  . . . . . . . . . . . .	L Near	 000004C2 _TEXT	
  fLoop4 . . . . . . . . . . . .	L Near	 000004F7 _TEXT	
  fLoop5 . . . . . . . . . . . .	L Near	 00000503 _TEXT	
  oLoop2 . . . . . . . . . . . .	L Near	 0000052B _TEXT	
  endFun . . . . . . . . . . . .	L Near	 000005B1 _TEXT	
findT  . . . . . . . . . . . . .	P Near	 000001D1 _TEXT	Length= 00000183 Public STDCALL
  fLoop1 . . . . . . . . . . . .	L Near	 000001F3 _TEXT	
  fLoop2 . . . . . . . . . . . .	L Near	 0000021C _TEXT	
  fLoop3 . . . . . . . . . . . .	L Near	 00000228 _TEXT	
  oLoop  . . . . . . . . . . . .	L Near	 00000250 _TEXT	
  fLoop4 . . . . . . . . . . . .	L Near	 00000285 _TEXT	
  fLoop5 . . . . . . . . . . . .	L Near	 00000291 _TEXT	
  oLoop2 . . . . . . . . . . . .	L Near	 000002B9 _TEXT	
  endFun . . . . . . . . . . . .	L Near	 0000033F _TEXT	
intro  . . . . . . . . . . . . .	P Near	 000006A9 _TEXT	Length= 000000C3 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000006B3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000006D9 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000006FF _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000725 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000075A _TEXT	
kEntery  . . . . . . . . . . . .	P Near	 000003CD _TEXT	Length= 00000041 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000003EB _TEXT	
  skipper  . . . . . . . . . . .	L Near	 000003FF _TEXT	
  outss  . . . . . . . . . . . .	L Near	 00000407 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public STDCALL
pEntery  . . . . . . . . . . . .	P Near	 000000C4 _TEXT	Length= 00000075 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000F1 _TEXT	
  skiper . . . . . . . . . . . .	L Near	 00000100 _TEXT	
  noJ  . . . . . . . . . . . . .	L Near	 0000010A _TEXT	
  outss  . . . . . . . . . . . .	L Near	 0000010C _TEXT	
  nNeed  . . . . . . . . . . . .	L Near	 00000138 _TEXT	
pSPrint  . . . . . . . . . . . .	P Near	 00000671 _TEXT	Length= 00000038 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000687 _TEXT	
  skip . . . . . . . . . . . . .	L Near	 00000698 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
unchange . . . . . . . . . . . .	P Near	 000005C0 _TEXT	Length= 00000079 Public STDCALL
  sRow . . . . . . . . . . . . .	L Near	 000005E7 _TEXT	
  nREdge1  . . . . . . . . . . .	L Near	 000005F7 _TEXT	
  nREdge2  . . . . . . . . . . .	L Near	 0000060B _TEXT	
  sCol . . . . . . . . . . . . .	L Near	 00000611 _TEXT	
  nCEdge1  . . . . . . . . . . .	L Near	 0000061F _TEXT	
  nCEdge2  . . . . . . . . . . .	L Near	 0000062F _TEXT	
  rets . . . . . . . . . . . . .	L Near	 00000634 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Grid . . . . . . . . . . . . . .	Byte	 00000044 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cCo  . . . . . . . . . . . . . .	Byte	 000004E8 _DATA	
col  . . . . . . . . . . . . . .	Byte	 000004E6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
eText  . . . . . . . . . . . . .	Byte	 00000254 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
istr . . . . . . . . . . . . . .	Byte	 0000001B _DATA	
k_sizeb  . . . . . . . . . . . .	DWord	 00000040 _DATA	
k_size . . . . . . . . . . . . .	DWord	 0000003C _DATA	
key  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nETextSize . . . . . . . . . . .	Byte	 0000044B _DATA	
nPTextSize . . . . . . . . . . .	Byte	 0000044A _DATA	
nPText . . . . . . . . . . . . .	Byte	 00000159 _DATA	
neText . . . . . . . . . . . . .	Byte	 0000034F _DATA	
pText  . . . . . . . . . . . . .	Byte	 0000005E _DATA	
pair1  . . . . . . . . . . . . .	DWord	 000004D5 _DATA	
pair2  . . . . . . . . . . . . .	DWord	 000004DD _DATA	
prompt0  . . . . . . . . . . . .	Byte	 0000044C _DATA	
prompt1  . . . . . . . . . . . .	Byte	 0000046E _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000496 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 000004AF _DATA	
prompt4  . . . . . . . . . . . .	Byte	 000004BA _DATA	
prompt5  . . . . . . . . . . . .	Byte	 000004C7 _DATA	
rCo  . . . . . . . . . . . . . .	Byte	 000004E7 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
row  . . . . . . . . . . . . . .	Byte	 000004E5 _DATA	
strLen . . . . . . . . . . . . .	Number	 0000001Ah   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
